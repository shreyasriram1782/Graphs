from collections import deque

def numIslands(grid):
    if not grid or not grid[0]:
        return 0

    def bfs(i, j):
        queue = deque([(i, j)])

        while queue:
            x, y = queue.popleft()

            # Check if the current cell is within bounds and is land
            if 0 <= x < m and 0 <= y < n and grid[x][y] == '1':
                # Mark the current cell as visited
                grid[x][y] = '0'

                # Enqueue adjacent land cells (up, down, left, right)
                queue.append((x + 1, y))
                queue.append((x - 1, y))
                queue.append((x, y + 1))
                queue.append((x, y - 1))

    m, n = len(grid), len(grid[0])
    num_islands = 0

    # Iterate through each cell in the grid
    for i in range(m):
        for j in range(n):
            # If the current cell is land, perform BFS to mark the connected land cells
            if grid[i][j] == '1':
                num_islands += 1
                bfs(i, j)

    return num_islands

# Example usage:
grid = [
    ['1', '1', '1', '1', '0'],
    ['1', '1', '0', '1', '0'],
    ['1', '1', '0', '0', '0'],
    ['0', '0', '0', '0', '0']
]

result = numIslands(grid)
print(result)  # Output: 1

"""
    # Time Complexity: O(m * n) - Each cell is visited once during BFS.
    # Space Complexity: O(min(m, n)) - Queue size during BFS.
"""
